Day #12 - 𝗧𝗵𝗲 𝗺𝗲𝘀𝘀𝗮𝗴𝗶𝗻𝗴 𝗾𝘂𝗲𝘂𝗲 𝗽𝘂𝗯-𝘀𝘂𝗯 𝗺𝗼𝗱𝗲𝗹

All the messaging queues and messaging streams follow a pub-sub model, a publisher-subscriber model. These are the technical jargons:

1) Publisher - The one who publishes(sends) the message/event.

2) Subscriber - The channel that subscribes to this message/event and further processes it.

3) topic - this is the channel where all the events are pushed by publisher and subscribed by consumer.

4) broker - The messaging queue(kafka/activeMQ/rabbitMQ etc) that handles the whole process, basically the CPU of this model.

5) topic partitioning - Each topic is partitioned for each consumer to subscribe it. This is how apache kafka and other brokers facilitate parallelism.

since we implemented the kafka logic yesterday, lets see the implementation of redis pub-sub model. Now the primary functionality of redis is for caching, but it also enables in-memory dedicated event driven architecture. This is the reason, redis is almost always a part of every large distributed system.

In java redis uses jedis for its implementation:
Event publish:-
 Jedis jedis = new Jedis("localhost", port);
 String channel = "channel";
 String message = "Hello, this is a test message from the publisher!";

 jedis.publish(channel, message);

Event consumed:-
 Jedis jedis = new Jedis("localhost", port);
 JedisPubSub jedisPubSub = new JedisPubSub() {
 @Override
 public void onMessage(String channel, String message) {
 System.out.println("Received message: " + message + " from channel: " + channel);
 }
 };
 System.out.println("Subscribed to channel: channel");
 jedis.subscribe(jedisPubSub, "channel");